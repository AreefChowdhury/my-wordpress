name: WordPress Core Test Suite

on: [push]

env:
  LOCAL_DIR: build
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
  PHP_FPM_UID: 1001 # This needs to be dynamic
  PHP_FPM_GID: 116 # This needs to be dynamic
  COMPOSER_INSTALL: false

jobs:
  setup-wordpress:
    name: Setup WordPress
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout the WordPress Importer plugin
        run: svn checkout -r 2387243 https://plugins.svn.wordpress.org/wordpress-importer/trunk/ tests/phpunit/data/plugins/wordpress-importer

      - name: Log debug information
        run: |
          npm --version
          which npm
          node --version
          curl --version
          git --version
          svn --version
          php --version
          php -i
          locale -a

      - name: Detect desired NPM version
        run: nvmrc=$(cat .nvmrc)

      - name: Cache Node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-$nvmrc-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-$nvmrc-
            ${{ runner.os }}

      - name: Install NPM
        uses: actions/setup-node@v1
        with:
          node-version: $nvmrc

      - name: Install Dependencies
        run: npm ci

      - name: Build WordPress
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: built-wp-${{ github.sha }}-${{ matrix.os }}
          path: |
            .
            !node_modules

  test-php:
    name: Test PHP ${{ matrix.php_versions }} (${{ matrix.os }})
    needs: setup-wordpress
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        php_versions: [ '8.0', 7.4, 7.3, 7.2, 7.1, '7.0', 5.6.20 ]
        os: [ ubuntu-latest ]
    env:
      LOCAL_PHP: ${{ matrix.php_versions }}-fpm

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: built-wp-${{ github.sha }}-${{ matrix.os }}

      - name: Log debug information
        run: |
          npm --version
          which npm
          node --version
          curl --version
          git --version
          svn --version
          php --version
          php -i
          locale -a

      - name: Cache Node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-$nvmrc-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-$nvmrc-
            ${{ runner.os }}

      - name: Install NPM
        uses: actions/setup-node@v1
        with:
          node-version: $nvmrc

      - name: Install Composer dependencies
        if: ${{ env.COMPOSER_INSTALL == true }}
        run: |
          docker-compose run --rm php composer --version
          docker-compose run --rm php composer install

      - name: Install Dependencies
        run: npm ci

      - name: Start Docker environment
        run: |
          npm run env:start

      - name: Check running Docker containers
        run: docker ps -a

      - name: Docker debug information
        run: |
          docker -v
          docker-compose -v
          docker-compose run --rm mysql mysql --version
          docker-compose run --rm php php --version
          docker-compose run --rm php php -m

      - name: Build WordPress
        run: npm run build

      - name: Install WordPress
        run: npm run env:install

      # PHP 8.0 test runner.
      - name: Run PHPUnit tests (PHP 8 only)
        if: ${{ env.LOCAL_PHP == '8.0-fpm' }}

        # The PHPUnit 7.x phar is not compatible with PHP 8 and won't be updated,
        # as PHPUnit 7 is no longer supported, so run the Composer-installed PHPUnit instead.
        run: |
          docker-compose run --rm php composer --version
          docker-compose run --rm php composer install --ignore-platform-reqs
          npm run test:php-composer -- --verbose -c phpunit.xml.dist
          npm run test:php-composer -- --verbose -c phpunit.xml.dist --group ajax
          npm run test:php-composer -- --verbose -c tests/phpunit/multisite.xml
          npm run test:php-composer -- --verbose -c tests/phpunit/multisite.xml --group ms-files
          npm run test:php-composer -- --verbose -c phpunit.xml.dist --group external-http
          npm run test:php-composer -- --verbose -c phpunit.xml.dist --group restapi-jsclient
        # __fakegroup__ is excluded to force PHPUnit to ignore the <exclude> settings in phpunit.xml.dist.
        # Xdebug supports PHP 8 only from version 3.0, which is not released yet.
        # Once Xdebug 3.0 is released and included in the Docker image, this should be uncommented again.
        # LOCAL_PHP_XDEBUG=true docker-compose run --rm phpunit phpunit -v --group xdebug --exclude-group __fakegroup__

      # PHP test runner for all other versions.
      - name: Run PHPUnit tests
        if: ${{ env.LOCAL_PHP != '8.0-fpm' }}
        run: |
          npm run test:php -- --verbose -c phpunit.xml.dist &&
          npm run test:php -- --verbose -c phpunit.xml.dist --group ajax &&
          npm run test:php -- --verbose -c tests/phpunit/multisite.xml &&
          npm run test:php -- --verbose -c tests/phpunit/multisite.xml --group ms-files &&
          npm run test:php -- --verbose -c phpunit.xml.dist --group external-http &&
          npm run test:php -- --verbose -c phpunit.xml.dist --group restapi-jsclient &&
          # __fakegroup__ is excluded to force PHPUnit to ignore the <exclude> settings in phpunit.xml.dist.
          LOCAL_PHP_XDEBUG=true npm run test:php -- -v --group xdebug --exclude-group __fakegroup__
