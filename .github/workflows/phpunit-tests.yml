name: PHPUnit Tests

on:
  push:
    branches:
      - trunk
      - '3.[7-9]'
      - '[4-9].[0-9]'
    tags:
      - '3.[7-9]*'
      - '[4-9].[0-9]*'
  pull_request:
    branches:
      - trunk
      - '3.[7-9]'
      - '[4-9].[0-9]'
  workflow_dispatch:
  # Once weekly On Sundays at 00:00 UTC.
  schedule:
    - cron: '0 0 * * 0'

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
    # The concurrency group contains the workflow name and the branch name for pull requests
    # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

env:
  LOCAL_DIR: build
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: ${{ true }}
  COMPOSER_INSTALL: ${{ false }}
  # Controls which NPM script to use for running PHPUnit tests. Options ar `php` and `php-composer`.
  PHPUNIT_SCRIPT: php
  LOCAL_PHP_MEMCACHED: ${{ false }}

jobs:
  # Sets up WordPress for testing or development use.
  #
  # Performs the following steps:
  # - Cancels all previous workflow runs for pull requests that have not completed.
  # - Checks out the repository.
  # - Logs debug information about the runner container.
  # - Installs NodeJS.
  # _ Installs NPM dependencies using install-changed to hash the `package.json` file.
  # - Builds WordPress to run from the `build` directory.
  # - Creates a ZIP file of compiled WordPress.
  # - Uploads ZIP file as an artifact.
  setup-wordpress:
    name: Setup WordPress
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'WordPress/wordpress-develop' || github.event_name == 'pull_request' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

      - name: Log debug information
        run: |
          echo "$GITHUB_REF"
          echo "$GITHUB_EVENT_NAME"
          npm --version
          node --version
          curl --version
          git --version
          svn --version
          php --version
          php -i
          locale -a

      - name: Install NodeJS
        uses: actions/setup-node@eeb10cff27034e7acf239c5d29f62154018672fd # v3.3.0
        with:
          node-version-file: '.nvmrc'
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Build WordPress
        run: npm run build

      - name: Create ZIP artifact
        uses: thedoctor0/zip-release@09336613be18a8208dfa66bd57efafd9e2685657 # v0.6.2
        with:
          filename: built-wp-${{ github.sha }}.zip
          exclusions: '*.git* /*node_modules/* packagehash.txt'

      - name: Upload build artifact
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        with:
          name: built-wp-${{ github.sha }}
          path: built-wp-${{ github.sha }}.zip
          if-no-files-found: error

  # Runs the PHPUnit tests for WordPress.
  #
  # Performs the following steps:
  # - Set environment variables.
  # - Sets up the environment variables needed for testing with memcached (if desired).
  # - Downloads the built WordPress artifact from the previous job.
  # - Unzips the artifact.
  # - Installs NodeJS.
  # _ Installs NPM dependencies using install-changed to hash the `package.json` file.
  # - Configures caching for Composer.
  # _ Installs Composer dependencies (if desired).
  # - Logs Docker debug information (about both the Docker installation within the runner).
  # - Starts the WordPress Docker container.
  # - Starts the memcached server after the Docker network has been created (if desired).
  # - Logs WordPress Docker container debug information.
  # - Logs debug general information.
  # - Logs the running Docker containers.
  # - Logs debug information about what's installed within the WordPress Docker containers.
  # - Install WordPress within the Docker container.
  # - Run the PHPUnit tests.
  # - Checks out the WordPress Test reporter repository.
  # - Reconnect the directory to the Git repository.
  # - Submit the test results to the WordPress.org host test results.
  test-php:
    name: ${{ matrix.php }}${{ matrix.multisite && ' multisite' || '' }}${{ matrix.split_slow && ' slow tests' || '' }}${{ matrix.memcached && ' with memcached' || '' }} on ${{ matrix.os }}
    needs: setup-wordpress
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        php: [ '5.3', '5.4', '5.5' ]
        os: [ ubuntu-latest ]
        split_slow: [ false, true ]
        multisite: [ false, true ]
        memcached: [ false ]
        include:
          - php: '5.6'
            phpunit: '4-php-5.6'
            os: ubuntu-latest
            split_slow: false
            multisite: false
            memcached: false
          - php: '5.6'
            phpunit: '4-php-5.6'
            os: ubuntu-latest
            split_slow: false
            multisite: true
            memcached: false
          - php: '5.6'
            phpunit: '4-php-5.6'
            os: ubuntu-latest
            split_slow: true
            multisite: false
            memcached: false
          - php: '5.6'
            phpunit: '4-php-5.6'
            os: ubuntu-latest
            split_slow: true
            multisite: true
            memcached: false
    env:
      LOCAL_PHP: ${{ matrix.php }}-fpm
      LOCAL_PHPUNIT: ${{ matrix.phpunit && matrix.phpunit || matrix.php }}-fpm
      LOCAL_PHP_MEMCACHED: ${{ matrix.memcached }}
      PHPUNIT_CONFIG: ${{ matrix.multisite && 'tests/phpunit/multisite.xml' || 'phpunit.xml.dist' }}
      SLOW_TESTS: 'external-http,media'

    steps:
      - name: Configure environment variables
        run: |
          echo "PHP_FPM_UID=$(id -u)" >> $GITHUB_ENV
          echo "PHP_FPM_GID=$(id -g)" >> $GITHUB_ENV

      - name: Download the built WordPress artifact
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
        with:
          name: built-wp-${{ github.sha }}

      - name: Unzip built artifact
        run: unzip built-wp-${{ github.sha }}.zip

      - name: Install NodeJS
        uses: actions/setup-node@eeb10cff27034e7acf239c5d29f62154018672fd # v3.3.0
        with:
          node-version-file: '.nvmrc'
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Cache Composer dependencies
        if: ${{ env.COMPOSER_INSTALL == true }}
        uses: actions/cache@c3f1317a9e7b1ef106c153ac8c0f00fed3ddbc0d # v3.0.4
        env:
          cache-name: cache-composer-dependencies
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Install Composer dependencies
        if: ${{ env.COMPOSER_INSTALL == true }}
        run: |
          docker-compose run --rm php composer --version
          docker-compose run --rm php composer install

      - name: Docker debug information
        run: |
          docker -v
          docker-compose -v

      - name: Start Docker environment
        run: |
          npm run env:start

      # The memcached server needs to start after the Docker network has been set up with `npm run env:start`.
      - name: Start the Memcached server.
        if: ${{ matrix.memcached }}
        run: |
          cp tests/phpunit/includes/object-cache.php build/wp-content/object-cache.php
          docker run --name memcached --net $(basename "$PWD")_wpdevnet -d memcached

      - name: General debug information
        run: |
          npm --version
          node --version
          curl --version
          git --version
          svn --version

      - name: Log running Docker containers
        run: docker ps -a

      - name: WordPress Docker container debug information
        run: |
          docker-compose run --rm mysql mysql --version
          docker-compose run --rm php php --version
          docker-compose run --rm php php -m
          docker-compose run --rm php php -i
          docker-compose run --rm php locale -a

      - name: Install WordPress
        run: npm run env:install

      - name: Run slow PHPUnit tests
        if: ${{ matrix.split_slow }}
        run: npm run test:${{ env.PHPUNIT_SCRIPT }} -- --verbose -c ${{ env.PHPUNIT_CONFIG }} --group ${{ env.SLOW_TESTS }}

      - name: Run PHPUnit tests for single site excluding slow tests
        if: ${{ matrix.php < '7.0' && ! matrix.split_slow && ! matrix.multisite }}
        run: npm run test:${{ env.PHPUNIT_SCRIPT }} -- --verbose -c ${{ env.PHPUNIT_CONFIG }} --exclude-group ${{ env.SLOW_TESTS }},ajax,ms-files,ms-required

      - name: Run PHPUnit tests for Multisite excluding slow tests
        if: ${{ matrix.php < '7.0' && ! matrix.split_slow && matrix.multisite }}
        run: npm run test:${{ env.PHPUNIT_SCRIPT }} -- --verbose -c ${{ env.PHPUNIT_CONFIG }} --exclude-group ${{ env.SLOW_TESTS }},ajax,ms-files,ms-excluded,oembed-headers

      - name: Run PHPUnit tests
        if: ${{ matrix.php >= '7.0' }}
        run: npm run test:${{ env.PHPUNIT_SCRIPT }} -- --verbose -c ${{ env.PHPUNIT_CONFIG }}

      - name: Run AJAX tests
        if: ${{ ! matrix.multisite && ! matrix.split_slow }}
        run: npm run test:${{ env.PHPUNIT_SCRIPT }} -- --verbose -c ${{ env.PHPUNIT_CONFIG }} --group ajax

      - name: Run external HTTP tests
        if: ${{ ! matrix.multisite && ! matrix.split_slow }}
        run: npm run test:${{ env.PHPUNIT_SCRIPT }} -- --verbose -c phpunit.xml.dist --group external-http

      - name: Checkout the WordPress Test Reporter
        if: ${{ github.repository == 'WordPress/wordpress-develop' && github.ref == 'refs/heads/trunk' && matrix.report }}
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
        with:
          repository: 'WordPress/phpunit-test-runner'
          path: 'test-runner'

      - name: Set up the Git repository
        if: ${{ github.repository == 'WordPress/wordpress-develop' && github.ref == 'refs/heads/trunk' && matrix.report }}
        run: |
          git init
          git remote add origin https://github.com/WordPress/wordpress-develop.git
          git fetch
          git reset origin/trunk

      - name: Submit test results to the WordPress.org host test results
        if: ${{ github.repository == 'WordPress/wordpress-develop' && github.ref == 'refs/heads/trunk' && matrix.report }}
        env:
          WPT_REPORT_API_KEY: "${{ secrets.WPT_REPORT_API_KEY }}"
        run: docker-compose run --rm -e WPT_REPORT_API_KEY -e WPT_PREPARE_DIR=/var/www -e WPT_TEST_DIR=/var/www php php test-runner/report.php

  slack-notifications:
    name: Slack Notifications
    uses: WordPress/wordpress-develop/.github/workflows/slack-notifications.yml@trunk
    needs: [ setup-wordpress, test-php ]
    if: ${{ github.repository == 'WordPress/wordpress-develop' && github.event_name != 'pull_request' && always() }}
    with:
      calling_status: ${{ needs.test-php.result == 'success' && 'success' || needs.test-php.result == 'cancelled' && 'cancelled' || 'failure' }}
    secrets:
      SLACK_GHA_SUCCESS_WEBHOOK: ${{ secrets.SLACK_GHA_SUCCESS_WEBHOOK }}
      SLACK_GHA_CANCELLED_WEBHOOK: ${{ secrets.SLACK_GHA_CANCELLED_WEBHOOK }}
      SLACK_GHA_FIXED_WEBHOOK: ${{ secrets.SLACK_GHA_FIXED_WEBHOOK }}
      SLACK_GHA_FAILURE_WEBHOOK: ${{ secrets.SLACK_GHA_FAILURE_WEBHOOK }}
