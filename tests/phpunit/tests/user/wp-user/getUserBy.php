<?php

/**
 * @group  user
 * @covers WP_User::get_data_by
 */
class Tests_User_WpUser_GetDataBy extends WP_UnitTestCase {
	protected static $user_id;
	protected static $user_data = array(
		'user_login'    => 'user1',
		'user_nicename' => 'userone',
		'user_pass'     => 'password',
		'first_name'    => 'John',
		'last_name'     => 'Doe',
		'display_name'  => 'John Doe',
		'user_email'    => 'jonny@battlefield3.com',
		'user_url'      => 'http://tacos.com',
		'role'          => 'contributor',
		'nickname'      => 'Johnny',
		'description'   => 'I am a WordPress user that cares about privacy.',
	);

	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
		self::$user_id = $factory->user->create( self::$user_data );
	}

	/**
	 * @dataProvider data_id_field_for_valid_userid
	 */
	public function test_id_field_for_valid_userid( $cast_func ) {
		$user_id = $cast_func( self::$user_id );

		$user = WP_User::get_data_by( 'id', $user_id );
		$this->assertInstanceOf( 'stdClass', $user, 'User is not an instance of stdClass' );
		$this->assertSame( self::$user_id, (int) $user->ID, 'User ID does not match the user generated by the factory' );
	}

	/**
	 * Data provider.
	 *
	 * @return array
	 */
	public function data_id_field_for_valid_userid() {
		return array(
			'integer user ID' => array( 'intval' ),
			'string user ID'  => array( 'strval' ),
			'float user ID'   => array( 'floatval' ),
		);
	}

	/**
	 * @dataProvider data_id_field_for_invalid_userid
	 * @group        me
	 */
	public function test_id_field_for_invalid_userid( $user_id ) {
		$this->assertFalse( WP_User::get_data_by( 'id', $user_id ) );
	}

	/**
	 * Data provider.
	 *
	 * @return array
	 */
	public function data_id_field_for_invalid_userid() {
		return array(
			'integer'             => array( 99999 ),
			'integer less than 0' => array( -1 ),
			'integer 0'           => array( 0 ),
			'non-numeric string'  => array( 'non-numeric' ),
			'string integer'      => array( '99999' ),
			'string less than 0'  => array( '-1' ),
			'string 0'            => array( '0' ),
		);
	}

	public function test_alias_of_id() {
		$user = WP_User::get_data_by( 'ID', self::$user_id );
		$this->assertInstanceOf( 'stdClass', $user, 'User is not an instance of stdClass' );
		$this->assertSame( self::$user_id, (int) $user->ID, 'User ID does not match the user generated by the factory' );
	}

	/**
	 * @dataProvider data_scalar_value
	 */
	public function test_scalar_value( $field, $value ) {
		if ( 'id' === $field || 'ID' === $field ) {
			$value = self::$user_id;
		}

		$user = WP_User::get_data_by( $field, $value );
		$this->assertInstanceOf( 'stdClass', $user, 'User is not an instance of stdClass' );
		$this->assertSame( self::$user_id, (int) $user->ID, 'User ID does not match the user generated by the factory' );
	}

	/**
	 * Data provider.
	 *
	 * @return array
	 */
	public function data_scalar_value() {
		return array(
			'id'          => array(
				'field' => 'id',
				'value' => null,
			),
			'ID'          => array(
				'field' => 'id',
				'value' => null,
			),
			'slug'        => array(
				'field' => 'slug',
				'value' => self::$user_data['user_nicename'],
			),
			'email'       => array(
				'field' => 'email',
				'value' => self::$user_data['user_email'],
			),
			'login: null' => array(
				'field' => 'login',
				'value' => self::$user_data['user_login'],
			),
		);
	}

	/**
	 * @dataProvider data_nonscalar_value
	 */
	public function test_nonscalar_value( $field, $value ) {
		$this->assertFalse( WP_User::get_data_by( $field, $value ) );
	}

	/**
	 * Data provider.
	 *
	 * @return array
	 */
	public function data_nonscalar_value() {
		$obj = new stdClass();

		return array(
			// null value.
			'id: null'           => array(
				'field' => 'id',
				'value' => null,
			),
			'slug: null'         => array(
				'field' => 'slug',
				'value' => null,
			),
			'email: null'        => array(
				'field' => 'email',
				'value' => null,
			),
			'login: null'        => array(
				'field' => 'login',
				'value' => null,
			),
			// array value.
			'id: array type'     => array(
				'field' => 'id',
				'value' => array( 'array' ),
			),
			'slug: array type'   => array(
				'field' => 'slug',
				'value' => array( 'array' ),
			),
			'email: array type'  => array(
				'field' => 'email',
				'value' => array( 'array' ),
			),
			'login: array type'  => array(
				'field' => 'login',
				'value' => array( 'array' ),
			),
			// object value.
			'id: object type'    => array(
				'field' => 'id',
				'value' => $obj,
			),
			'slug: object type'  => array(
				'field' => 'slug',
				'value' => $obj,
			),
			'email: object type' => array(
				'field' => 'email',
				'value' => $obj,
			),
			'login: object type' => array(
				'field' => 'login',
				'value' => $obj,
			),
		);
	}
}
